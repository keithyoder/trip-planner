= turbo_stream_from "dashboard"

/ Full screen map container
#dashboard-container style="height: 100vh; width: 100vw; position: relative; overflow: hidden;"
  / Map takes full screen
  #map style="height: 100%; width: 100%;"
  
  / Top header overlay
  .dashboard-header
    h1.display-6.fw-bold.mb-0
      i.bi.bi-speedometer2.me-2
      | Live Dashboard
    - if @latest_log
      p.mb-0.small
        | Last update: #{time_ago_in_words(@latest_log.timestamp)} ago
    - else
      p.mb-0.small No data available

  / Left side widgets
  - if @latest_log
    #dashboard-widgets-left
      / Odometer widget
      .widget.odometer-widget
        .widget-label.mb-2.small DISTANCE TODAY
        .odometer-container
          - total_km = (@trip_detector.trip_summary[:total_distance_km]&.round(1)) || 0
          - digits = format('%07.1f', total_km).chars
          - digits.each do |digit|
            - if digit == '.'
              .odometer-separator .
            - else
              .odometer-digit = digit
        .widget-label.mt-2.small KILOMETERS

      / Speed widget (if available)
      - if @latest_log.data['gps_speed']
        .widget
          .widget-icon
            i.bi.bi-speedometer2.text-success
          .widget-value
            = (@latest_log.data['gps_speed'].to_f * 3.6).round(1)
            span.widget-unit km/h
          .widget-label Speed

      / GPS Info widget
      - if @latest_log.data['gps_latitude']
        .widget.gps-widget
          .widget-label
            i.bi.bi-geo-alt.me-1
            | GPS Info
          .gps-details
            .gps-row
              span.gps-label Lat:
              span.gps-value = @latest_log.data['gps_latitude']&.round(6)
            .gps-row
              span.gps-label Lon:
              span.gps-value = @latest_log.data['gps_longitude']&.round(6)
            - if @latest_log.data['gps_altitude']
              .gps-row
                span.gps-label Alt:
                span.gps-value = "#{@latest_log.data['gps_altitude']&.round(1)} m"
            - if @latest_log.data['gps_satellites']
              .gps-row
                span.gps-label Sats:
                span.gps-value = @latest_log.data['gps_satellites']

  = render 'sidebar', latest_log: @latest_log, trip_detector: @trip_detector

/ Map initialization
- if @latest_log && @latest_log.data['gps_latitude']
  script
    |
      document.addEventListener('DOMContentLoaded', function() {
        var map = L.map('map', {
          zoomControl: false
        }).setView([#{@latest_log.data['gps_latitude']}, #{@latest_log.data['gps_longitude']}], 15);
        
        L.control.zoom({
          position: 'bottomright'
        }).addTo(map);
        
        L.tileLayer(
          'https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}.png?api_key=50e54c7f-f220-44f9-875c-a0ce16bc63b5',
          {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
          }
        ).addTo(map);
        
        var customIcon = L.icon({
          iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
          iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
          shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
          iconSize: [25, 41],
          iconAnchor: [12, 41],
          popupAnchor: [1, -34],
          shadowSize: [41, 41]
        });
        
        var marker = L.marker([#{@latest_log.data['gps_latitude']}, #{@latest_log.data['gps_longitude']}], {icon: customIcon}).addTo(map);
        
        marker.bindPopup(`
          <strong>Current Location</strong><br>
          Temp: #{@latest_log.data['shtc3_temperature']&.round(1)}Â°C<br>
          Speed: #{(@latest_log.data['gps_speed'].to_f * 3.6).round(1)} km/h
        `);
        
        // Sidebar toggle functionality
        var toggle = document.getElementById('sidebar-toggle');
        var sidebar = document.getElementById('weather-sidebar');
        
        toggle.addEventListener('click', function() {
          sidebar.classList.toggle('open');
          toggle.classList.toggle('open');
        });

        setTimeout(function() { location.reload(); }, 30000);
      });

meta name="turbo-refresh-method" content="morph"
meta name="turbo-refresh-scroll" content="preserve"
